{"ast":null,"code":"import { Streamlit } from \"streamlit-component-lib\";\n\n// Add text and a button to the DOM. (You could also add these directly\n// to index.html.)\nvar head = document.getElementsByTagName('HEAD')[0];\nvar link = document.createElement('link');\nlink.rel = 'stylesheet';\nlink.type = 'text/css';\nlink.href = 'st-circular-progress/frontend/public/progres.css';\nconst container = document.body.appendChild(document.createElement(\"div\"));\ncontainer.className = \"progress-bar-container\";\nconst header = container.appendChild(document.createElement(\"h3\"));\nconst header_text = header.appendChild(document.createTextNode(\"\"));\nconst span = document.body.appendChild(document.createElement(\"span\"));\n// const textNode = span.appendChild(document.createTextNode(\"\"))\nconst button = span.appendChild(document.createElement(\"button\"));\nbutton.textContent = \"Click Me!\";\n\n// Add a click handler to our button. It will send data back to Streamlit.\nlet numClicks = 0;\nlet isFocused = false;\nbutton.onclick = function () {\n  // Increment numClicks, and pass the new value back to\n  // Streamlit via `Streamlit.setComponentValue`.\n  numClicks += 1;\n  Streamlit.setComponentValue(numClicks);\n};\nbutton.onfocus = function () {\n  isFocused = true;\n};\nbutton.onblur = function () {\n  isFocused = false;\n};\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event) {\n  // Get the RenderData from the event\n  const data = event.detail;\n\n  // Maintain compatibility with older versions of Streamlit that don't send\n  // a theme object.\n  if (data.theme) {\n    // Use CSS vars to style our button border. Alternatively, the theme style\n    // is defined in the data.theme object.\n    const borderStyling = `1px solid var(${isFocused ? \"--primary-color\" : \"gray\"})`;\n    button.style.border = borderStyling;\n    button.style.outline = borderStyling;\n  }\n\n  // Disable our button if necessary.\n  button.disabled = data.disabled;\n\n  // RenderData.args is the JSON dictionary of arguments sent from the\n  // Python script.\n  let name = data.args[\"name\"];\n\n  // Show \"Hello, name!\" with a non-breaking space afterwards.\n  header_text.textContent = `Hello, ${name}! ` + String.fromCharCode(160);\n\n  // We tell Streamlit to update our frameHeight after each render event, in\n  // case it has changed. (This isn't strictly necessary for the example\n  // because our height stays fixed, but this is a low-cost function, so\n  // there's no harm in doing it redundantly.)\n  Streamlit.setFrameHeight();\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender);\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady();\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight();","map":{"version":3,"names":["Streamlit","head","document","getElementsByTagName","link","createElement","rel","type","href","container","body","appendChild","className","header","header_text","createTextNode","span","button","textContent","numClicks","isFocused","onclick","setComponentValue","onfocus","onblur","onRender","event","data","detail","theme","borderStyling","style","border","outline","disabled","name","args","String","fromCharCode","setFrameHeight","events","addEventListener","RENDER_EVENT","setComponentReady"],"sources":["/Users/cserrano/Documents/Streamlit-Local/sqlinsights/streamlit-circular-progress/st-circular-progress/frontend/src/index.tsx"],"sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\n\n// Add text and a button to the DOM. (You could also add these directly\n// to index.html.)\nvar head = document.getElementsByTagName('HEAD')[0];\nvar link = document.createElement('link');\nlink.rel = 'stylesheet';\nlink.type = 'text/css';\nlink.href = 'st-circular-progress/frontend/public/progres.css';\nconst container = document.body.appendChild(document.createElement(\"div\"))\ncontainer.className = \"progress-bar-container\"\nconst header = container.appendChild(document.createElement(\"h3\"))\nconst header_text = header.appendChild(document.createTextNode(\"\"))\nconst span = document.body.appendChild(document.createElement(\"span\"))\n// const textNode = span.appendChild(document.createTextNode(\"\"))\nconst button = span.appendChild(document.createElement(\"button\"))\nbutton.textContent = \"Click Me!\"\n\n// Add a click handler to our button. It will send data back to Streamlit.\nlet numClicks = 0\nlet isFocused = false\nbutton.onclick = function (): void {\n  // Increment numClicks, and pass the new value back to\n  // Streamlit via `Streamlit.setComponentValue`.\n  numClicks += 1\n  Streamlit.setComponentValue(numClicks)\n}\n\nbutton.onfocus = function (): void {\n  isFocused = true\n}\n\nbutton.onblur = function (): void {\n  isFocused = false\n}\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail\n\n  // Maintain compatibility with older versions of Streamlit that don't send\n  // a theme object.\n  if (data.theme) {\n    // Use CSS vars to style our button border. Alternatively, the theme style\n    // is defined in the data.theme object.\n    const borderStyling = `1px solid var(${isFocused ? \"--primary-color\" : \"gray\"\n      })`\n    button.style.border = borderStyling\n    button.style.outline = borderStyling\n  }\n\n  // Disable our button if necessary.\n  button.disabled = data.disabled\n\n  // RenderData.args is the JSON dictionary of arguments sent from the\n  // Python script.\n  let name = data.args[\"name\"]\n\n  // Show \"Hello, name!\" with a non-breaking space afterwards.\n  header_text.textContent = `Hello, ${name}! ` + String.fromCharCode(160)\n\n  // We tell Streamlit to update our frameHeight after each render event, in\n  // case it has changed. (This isn't strictly necessary for the example\n  // because our height stays fixed, but this is a low-cost function, so\n  // there's no harm in doing it redundantly.)\n  Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"mappings":"AAAA,SAASA,SAAS,QAAoB,yBAAyB;;AAE/D;AACA;AACA,IAAIC,IAAI,GAAGC,QAAQ,CAACC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACnD,IAAIC,IAAI,GAAGF,QAAQ,CAACG,aAAa,CAAC,MAAM,CAAC;AACzCD,IAAI,CAACE,GAAG,GAAG,YAAY;AACvBF,IAAI,CAACG,IAAI,GAAG,UAAU;AACtBH,IAAI,CAACI,IAAI,GAAG,kDAAkD;AAC9D,MAAMC,SAAS,GAAGP,QAAQ,CAACQ,IAAI,CAACC,WAAW,CAACT,QAAQ,CAACG,aAAa,CAAC,KAAK,CAAC,CAAC;AAC1EI,SAAS,CAACG,SAAS,GAAG,wBAAwB;AAC9C,MAAMC,MAAM,GAAGJ,SAAS,CAACE,WAAW,CAACT,QAAQ,CAACG,aAAa,CAAC,IAAI,CAAC,CAAC;AAClE,MAAMS,WAAW,GAAGD,MAAM,CAACF,WAAW,CAACT,QAAQ,CAACa,cAAc,CAAC,EAAE,CAAC,CAAC;AACnE,MAAMC,IAAI,GAAGd,QAAQ,CAACQ,IAAI,CAACC,WAAW,CAACT,QAAQ,CAACG,aAAa,CAAC,MAAM,CAAC,CAAC;AACtE;AACA,MAAMY,MAAM,GAAGD,IAAI,CAACL,WAAW,CAACT,QAAQ,CAACG,aAAa,CAAC,QAAQ,CAAC,CAAC;AACjEY,MAAM,CAACC,WAAW,GAAG,WAAW;;AAEhC;AACA,IAAIC,SAAS,GAAG,CAAC;AACjB,IAAIC,SAAS,GAAG,KAAK;AACrBH,MAAM,CAACI,OAAO,GAAG,YAAkB;EACjC;EACA;EACAF,SAAS,IAAI,CAAC;EACdnB,SAAS,CAACsB,iBAAiB,CAACH,SAAS,CAAC;AACxC,CAAC;AAEDF,MAAM,CAACM,OAAO,GAAG,YAAkB;EACjCH,SAAS,GAAG,IAAI;AAClB,CAAC;AAEDH,MAAM,CAACO,MAAM,GAAG,YAAkB;EAChCJ,SAAS,GAAG,KAAK;AACnB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,SAASK,QAAQA,CAACC,KAAY,EAAQ;EACpC;EACA,MAAMC,IAAI,GAAID,KAAK,CAA6BE,MAAM;;EAEtD;EACA;EACA,IAAID,IAAI,CAACE,KAAK,EAAE;IACd;IACA;IACA,MAAMC,aAAa,GAAI,iBAAgBV,SAAS,GAAG,iBAAiB,GAAG,MACpE,GAAE;IACLH,MAAM,CAACc,KAAK,CAACC,MAAM,GAAGF,aAAa;IACnCb,MAAM,CAACc,KAAK,CAACE,OAAO,GAAGH,aAAa;EACtC;;EAEA;EACAb,MAAM,CAACiB,QAAQ,GAAGP,IAAI,CAACO,QAAQ;;EAE/B;EACA;EACA,IAAIC,IAAI,GAAGR,IAAI,CAACS,IAAI,CAAC,MAAM,CAAC;;EAE5B;EACAtB,WAAW,CAACI,WAAW,GAAI,UAASiB,IAAK,IAAG,GAAGE,MAAM,CAACC,YAAY,CAAC,GAAG,CAAC;;EAEvE;EACA;EACA;EACA;EACAtC,SAAS,CAACuC,cAAc,CAAC,CAAC;AAC5B;;AAEA;AACAvC,SAAS,CAACwC,MAAM,CAACC,gBAAgB,CAACzC,SAAS,CAAC0C,YAAY,EAAEjB,QAAQ,CAAC;;AAEnE;AACA;AACAzB,SAAS,CAAC2C,iBAAiB,CAAC,CAAC;;AAE7B;AACA;AACA3C,SAAS,CAACuC,cAAc,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}